// <auto-generated />
using System;
using Gems.AddressRegistry.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Gems.AddressRegistry.DataAccess.Migrations
{
    [DbContext(typeof(AddressContext))]
    [Migration("20231012064510_InitalCreate")]
    partial class InitalCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Gems.AddressRegistry.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdministrativeAreaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Apdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("BuildingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EPSId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ERNId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LandPlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MunicipalAreaId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SettlementId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TerritoryId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdministrativeAreaId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("EPSId");

                    b.HasIndex("ERNId");

                    b.HasIndex("LandPlotId");

                    b.HasIndex("MunicipalAreaId");

                    b.HasIndex("RegionId");

                    b.HasIndex("SettlementId");

                    b.HasIndex("SpaceId");

                    b.HasIndex("TerritoryId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Gems.AddressRegistry.Entities.AdministrativeArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Apdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AdministrativeArea");
                });

            modelBuilder.Entity("Gems.AddressRegistry.Entities.Building", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Apdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("Postcode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Building");
                });

            modelBuilder.Entity("Gems.AddressRegistry.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Apdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Gems.AddressRegistry.Entities.Common.DataSourceBase", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SourceType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DataSource", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("DataSourceBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Gems.AddressRegistry.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Apdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Gems.AddressRegistry.Entities.EPS", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Apdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EPS");
                });

            modelBuilder.Entity("Gems.AddressRegistry.Entities.ERN", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Apdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ERN");
                });

            modelBuilder.Entity("Gems.AddressRegistry.Entities.LandPlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Apdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LandPlot");
                });

            modelBuilder.Entity("Gems.AddressRegistry.Entities.MunicipalArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Apdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MunicipalArea");
                });

            modelBuilder.Entity("Gems.AddressRegistry.Entities.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Apdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Gems.AddressRegistry.Entities.Settlement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Apdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Settlement");
                });

            modelBuilder.Entity("Gems.AddressRegistry.Entities.Space", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Apdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Space");
                });

            modelBuilder.Entity("Gems.AddressRegistry.Entities.Territory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Apdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Territory");
                });

            modelBuilder.Entity("Gems.AddressRegistry.Entities.DataSources.SpaceDataSource", b =>
                {
                    b.HasBaseType("Gems.AddressRegistry.Entities.Common.DataSourceBase");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("uuid");

                    b.HasIndex("SpaceId");

                    b.HasDiscriminator().HasValue("SpaceDataSource");
                });

            modelBuilder.Entity("Gems.AddressRegistry.Entities.Address", b =>
                {
                    b.HasOne("Gems.AddressRegistry.Entities.AdministrativeArea", "AdministrativeArea")
                        .WithMany()
                        .HasForeignKey("AdministrativeAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gems.AddressRegistry.Entities.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gems.AddressRegistry.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gems.AddressRegistry.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gems.AddressRegistry.Entities.EPS", "EPS")
                        .WithMany()
                        .HasForeignKey("EPSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gems.AddressRegistry.Entities.ERN", "ERN")
                        .WithMany()
                        .HasForeignKey("ERNId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gems.AddressRegistry.Entities.LandPlot", "LandPlot")
                        .WithMany()
                        .HasForeignKey("LandPlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gems.AddressRegistry.Entities.MunicipalArea", "MunicipalArea")
                        .WithMany()
                        .HasForeignKey("MunicipalAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gems.AddressRegistry.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gems.AddressRegistry.Entities.Settlement", "Settlement")
                        .WithMany()
                        .HasForeignKey("SettlementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gems.AddressRegistry.Entities.Space", "Space")
                        .WithMany()
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gems.AddressRegistry.Entities.Territory", "Territory")
                        .WithMany()
                        .HasForeignKey("TerritoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdministrativeArea");

                    b.Navigation("Building");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("EPS");

                    b.Navigation("ERN");

                    b.Navigation("LandPlot");

                    b.Navigation("MunicipalArea");

                    b.Navigation("Region");

                    b.Navigation("Settlement");

                    b.Navigation("Space");

                    b.Navigation("Territory");
                });

            modelBuilder.Entity("Gems.AddressRegistry.Entities.DataSources.SpaceDataSource", b =>
                {
                    b.HasOne("Gems.AddressRegistry.Entities.Space", "Space")
                        .WithMany("DataSources")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Gems.AddressRegistry.Entities.Space", b =>
                {
                    b.Navigation("DataSources");
                });
#pragma warning restore 612, 618
        }
    }
}
